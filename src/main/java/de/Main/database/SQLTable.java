package de.Main.database;import org.bukkit.Location;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.sql.Statement;import java.util.*;import java.util.stream.Collectors;public class SQLTable {    private final SQLConnection connection;    private final String name;    private final HashMap<String, SQLDataType> colums;    public SQLTable(SQLConnection connection, String name, HashMap<String, SQLDataType> colums) {        this.connection = connection;        this.name = name;        this.colums = colums;        createMoneyTable();    }    public Set<String> getName() {        return colums.keySet();    }    public SQLDataType getType(String columname) {        return colums.get(columname);    }    public void createMoneyTable() {        String sql = "CREATE TABLE IF NOT EXISTS " + name + "("; //erstellt eine neue Tabelle mit der uuid des users als Name, falls es sie noch nicht gibt        for (String colum : colums.keySet()) {            sql += colum + " " + colums.get(colum).toSQL() + ","; //wandelt es in SQL Sprache um        }        sql = sql.substring(0, sql.length() - 1); //letzes Komma l√∂schen, um den Befehl zu beenden        sql += ");"; //^^        try {            Statement stateMent = this.connection.getConnection().createStatement();            stateMent.executeUpdate(sql);        } catch (SQLException e) {            throw new RuntimeException(e);        }    }    public Location getLocation(String table, String columnName, Condition condition) {        try (PreparedStatement ps = select(table, columnName, condition)) {            try (ResultSet rs = ps.executeQuery()) {                if (rs.next()) {                    String locationString = rs.getString(columnName);                    if (locationString == null || locationString.isEmpty()) {                        return null;                    }                    return deserializeLocation(locationString);                }                return null;            }        } catch (SQLException e) {            throw new RuntimeException(e);        }    }    public void setLocation(String table, String columnName, Location loc, Condition condition) {        if (loc == null) {            remove(table, condition);            return;        }        String locationString = serializeLocation(loc);        set(table, columnName, locationString, condition);    }    private String serializeLocation(Location loc) {        if (loc == null) return null;        return loc.getWorld().getName() + ";" +                loc.getX() + ";" +                loc.getY() + ";" +                loc.getZ() + ";" +                loc.getYaw() + ";" +                loc.getPitch();    }    private Location deserializeLocation(String locString) {        if (locString == null || locString.isEmpty()) return null;        String[] parts = locString.split(";");        if (parts.length != 6) return null;        try {            String worldName = parts[0];            double x = Double.parseDouble(parts[1]);            double y = Double.parseDouble(parts[2]);            double z = Double.parseDouble(parts[3]);            float yaw = Float.parseFloat(parts[4]);            float pitch = Float.parseFloat(parts[5]);            return new Location(                    org.bukkit.Bukkit.getWorld(worldName),                    x, y, z, yaw, pitch            );        } catch (NumberFormatException e) {            throw new RuntimeException("Fehler beim Deserialisieren der Location: " + locString, e);        }    }    public static class Condition {        String value;        String columName;        public Condition(String columname, String value) {            this.value = value;            this.columName = columname;        }        public String getColumname() {            return columName;        }        public String getValue() {            return value;        }    }    public void insert(String table, Map<String, Object> values) {        String columns = String.join(", ", values.keySet());        String placeholders = values.keySet().stream().map(k -> "?").collect(Collectors.joining(", "));        String sql = "INSERT INTO " + table + " (" + columns + ") VALUES (" + placeholders + ")";        try (PreparedStatement ps = connection.getConnection().prepareStatement(sql)) {            int i = 1;            for (Object value : values.values()) {                ps.setObject(i++, value);            }            ps.executeUpdate();        } catch (SQLException e) {            throw new RuntimeException(e);        }    }    public void set(String table, String columName, Object objects, Condition condition) {        if (objects == null) {            remove(table, condition);            return;        }        if (exits(table, condition)) {            try {                String sql = "update " + table + " set " + columName + "=? where " + condition.columName + "=?";                try (PreparedStatement ps = connection.getConnection().prepareStatement(sql);) {                    ps.setObject(1, objects);                    ps.setString(2, condition.value);                    ps.executeUpdate();                }            } catch (SQLException e) {                throw new RuntimeException(e);            }        } else {            try {                String sql = "insert into " + table + " (" + columName + ") values (?)";                try (PreparedStatement ps = connection.getConnection().prepareStatement(sql)) {                    ps.setObject(1, objects);                    ps.executeUpdate();                }            } catch (SQLException e) {                throw new RuntimeException(e);            }        }    }    public void remove(String table, SQLTable.Condition condition) {        try {            String sql = "DELETE FROM " + table + " WHERE " + condition.columName + "=?";            try (PreparedStatement ps = connection.getConnection().prepareStatement(sql)) {                ps.setString(1, condition.value);                ps.executeUpdate();            }        } catch (SQLException e) {            throw new RuntimeException(e);        }    }    private PreparedStatement select(String table, String columName, Condition condition) {        try {            String sql = "select " + columName + " from " + table + " where " + condition.columName + "=?";            PreparedStatement ps = connection.getConnection().prepareStatement(sql);            ps.setString(1, condition.value);            return ps;        } catch (SQLException e) {            throw new RuntimeException(e);        }    }    public String getString(String table, String columName, Condition condition) {        try (PreparedStatement ps = select(table, columName, condition)) {            try (ResultSet rs = ps.executeQuery()) {                if (rs.next()) {                    return rs.getString(columName);                }                return null;            }        } catch (SQLException e) {            throw new RuntimeException(e);        }    }    public int getInt(String table, String columName, Condition condition) {        try (PreparedStatement ps = select(table, columName, condition)){                ResultSet rs = ps.executeQuery();            if (rs.next()) {                return rs.getInt(columName);            }            return 0;        } catch (SQLException e) {            throw new RuntimeException(e);        }    }    public Double getDouble(String table, String columName, Condition condition) {        try (                PreparedStatement ps = select(table, columName, condition);                ResultSet rs = ps.executeQuery()        ) {            if (rs.next()) {                return rs.getDouble(columName);            }            return 0.0;        } catch (SQLException e) {            throw new RuntimeException(e);        }    }    public boolean getBoolean(String table, String columName, Condition condition) {        try (                PreparedStatement ps = select(table, columName, condition);                ResultSet rs = ps.executeQuery()        ) {            if (rs.next()) {                return rs.getBoolean(columName);            }            return false;        } catch (SQLException e) {            throw new RuntimeException(e);        }    }    public boolean exits(String table, Condition condition) {        try {            String sql = "SELECT " + condition.columName + " FROM " + table + " WHERE " + condition.columName + "=?";            try (PreparedStatement ps = connection.getConnection().prepareStatement(sql)) {                ps.setString(1, condition.value.trim());                try (ResultSet rs = ps.executeQuery()) {                    boolean exists = rs.next();                    return exists;                }            }        } catch (SQLException e) {            throw new RuntimeException(e);        }    }    public List<Object> getAllValues(String table, String columnName) {        List<Object> values = new ArrayList<>();        String sql = "SELECT " + columnName + " FROM " + table;        try (PreparedStatement ps = connection.getConnection().prepareStatement(sql);             ResultSet rs = ps.executeQuery()) {            while (rs.next()) {                values.add(rs.getObject(columnName));            }        } catch (SQLException e) {            throw new RuntimeException(e);        }        return values;    }}